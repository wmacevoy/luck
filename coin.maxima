/* built-in 
   subset(set,pred) does not work with lambda predicates, I don't know why */

setbuild(set_or_list,predicate) :=
  block([ans,element],
    (ans : {},
     for element in set_or_list do 
       if predicate(element) then ans:adjoin(element,ans),
     ans));

setreduce(set_or_list,binary_op) :=
  block([first:true,ans,element],
    (first : true,
     for element in set_or_list do
       if first then
         (first:false,ans:element)
       else
         ans : binary_op(ans,element),
     ans));

n : 8;
phead : 1/2;
ptail : 1-phead;
p(x) := (n!/(x!*(n-x)!))*(phead)^x*(ptail)^(n-x);
X : makelist(k,k,0,n);
Omega(x) := setbuild(X,lambda([y],p(y)>p(x)));
omega(x) := setbuild(X,lambda([y],p(y)=p(x)));
L(x) := lsum(p(y),y,listify(Omega(x)))+(1/2)*lsum(p(y),y,listify(omega(x)));
W(x) := lsum(p(y),y,listify(omega(x)));
maxW : setreduce(map(W,X),max),numer;
